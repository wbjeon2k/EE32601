-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity saxpy_Block_split1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    y : IN STD_LOGIC_VECTOR (63 downto 0);
    a : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of saxpy_Block_split1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state26_io : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal gmem_addr_1_reg_1105 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_1111 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_1117 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_reg_1123 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_5_reg_1129 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_6_reg_1135 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_7_reg_1141 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_8_reg_1152 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_9_reg_1158 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_read_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_10_reg_1191 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_11_reg_1198 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_4_read_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_12_reg_1210 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_5_read_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_13_reg_1222 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_6_read_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_14_reg_1234 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_7_read_reg_1241 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_15_reg_1246 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_8_read_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_16_reg_1275 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf_1_fu_886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_9_read_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_17_reg_1292 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf_2_fu_915_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_18_reg_1339 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_19_reg_1346 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_10_read_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_10_reg_1358 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_fu_997_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state20_io : BOOLEAN;
    signal gmem_addr_11_read_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_11_reg_1373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_1_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_12_read_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_12_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_13_reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_14_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_15_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_16_reg_1408 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_17_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_18_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_19_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_2_fu_1005_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_13_read_reg_1433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_3_fu_1009_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_14_read_reg_1443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_4_fu_1013_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_15_read_reg_1453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_5_fu_1017_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_16_read_reg_1463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_6_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_17_read_reg_1473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_7_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_18_read_reg_1483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_8_fu_1039_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_19_read_reg_1493 : STD_LOGIC_VECTOR (31 downto 0);
    signal ybuf_9_fu_1048_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln27_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_1_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_2_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_3_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_4_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_5_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_6_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_7_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_8_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_9_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_1_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_2_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_3_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_4_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_5_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_6_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_7_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_8_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_9_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln47_fu_1025_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_1_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_2_fu_1043_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_3_fu_1052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_4_fu_1057_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_5_fu_1062_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_6_fu_1067_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_7_fu_1072_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_8_fu_1077_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_9_fu_1082_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_418_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_435_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_451_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_463_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_fu_484_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_1_fu_490_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_1_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_2_fu_515_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_2_fu_535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_3_fu_540_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_3_fu_560_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_4_fu_565_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_4_fu_585_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_5_fu_590_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_5_fu_610_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_6_fu_615_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_6_fu_635_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_7_fu_640_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_7_fu_660_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_8_fu_665_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln27_8_fu_685_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln27_9_fu_690_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln1_fu_710_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_fu_731_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_1_fu_737_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_1_fu_757_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_2_fu_762_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_2_fu_782_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_3_fu_787_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_3_fu_807_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_4_fu_812_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_4_fu_832_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_5_fu_837_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_5_fu_861_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_6_fu_866_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_6_fu_890_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_7_fu_895_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_7_fu_947_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_8_fu_952_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_8_fu_972_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_9_fu_977_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_418_ce : STD_LOGIC;
    signal grp_fu_422_ce : STD_LOGIC;
    signal grp_fu_427_ce : STD_LOGIC;
    signal grp_fu_431_ce : STD_LOGIC;
    signal grp_fu_435_ce : STD_LOGIC;
    signal grp_fu_439_ce : STD_LOGIC;
    signal grp_fu_443_ce : STD_LOGIC;
    signal grp_fu_447_ce : STD_LOGIC;
    signal grp_fu_451_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component saxpy_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component saxpy_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component saxpy_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_418_p0,
        din1 => grp_fu_418_p1,
        ce => grp_fu_418_ce,
        dout => grp_fu_418_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_422_p0,
        din1 => a,
        ce => grp_fu_422_ce,
        dout => grp_fu_422_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_427_p0,
        din1 => a,
        ce => grp_fu_427_ce,
        dout => grp_fu_427_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U4 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        din1 => a,
        ce => grp_fu_431_ce,
        dout => grp_fu_431_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U5 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_435_p0,
        din1 => a,
        ce => grp_fu_435_ce,
        dout => grp_fu_435_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U6 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_439_p0,
        din1 => a,
        ce => grp_fu_439_ce,
        dout => grp_fu_439_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U7 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_443_p0,
        din1 => a,
        ce => grp_fu_443_ce,
        dout => grp_fu_443_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U8 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_447_p0,
        din1 => a,
        ce => grp_fu_447_ce,
        dout => grp_fu_447_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U9 : component saxpy_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_451_p0,
        din1 => a,
        ce => grp_fu_451_ce,
        dout => grp_fu_451_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                buf_10_reg_1358 <= grp_fu_422_p2;
                gmem_addr_10_read_reg_1353 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                buf_11_reg_1373 <= grp_fu_422_p2;
                gmem_addr_11_read_reg_1368 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                buf_12_reg_1388 <= grp_fu_422_p2;
                buf_13_reg_1393 <= grp_fu_427_p2;
                buf_14_reg_1398 <= grp_fu_431_p2;
                buf_15_reg_1403 <= grp_fu_435_p2;
                buf_16_reg_1408 <= grp_fu_439_p2;
                buf_17_reg_1413 <= grp_fu_443_p2;
                buf_18_reg_1418 <= grp_fu_447_p2;
                buf_19_reg_1423 <= grp_fu_451_p2;
                gmem_addr_12_read_reg_1383 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                gmem_addr_10_reg_1191 <= sext_ln32_fu_720_p1;
                gmem_addr_11_reg_1198 <= sext_ln32_1_fu_747_p1;
                gmem_addr_3_read_reg_1186 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                gmem_addr_12_reg_1210 <= sext_ln32_2_fu_772_p1;
                gmem_addr_4_read_reg_1205 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                gmem_addr_13_read_reg_1433 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                gmem_addr_13_reg_1222 <= sext_ln32_3_fu_797_p1;
                gmem_addr_5_read_reg_1217 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                gmem_addr_14_read_reg_1443 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                gmem_addr_14_reg_1234 <= sext_ln32_4_fu_822_p1;
                gmem_addr_6_read_reg_1229 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                gmem_addr_15_read_reg_1453 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                gmem_addr_15_reg_1246 <= sext_ln32_5_fu_847_p1;
                gmem_addr_7_read_reg_1241 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                gmem_addr_16_read_reg_1463 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                gmem_addr_16_reg_1275 <= sext_ln32_6_fu_876_p1;
                gmem_addr_8_read_reg_1270 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                gmem_addr_17_read_reg_1473 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                gmem_addr_17_reg_1292 <= sext_ln32_7_fu_905_p1;
                gmem_addr_9_read_reg_1287 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                gmem_addr_18_read_reg_1483 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                gmem_addr_18_reg_1339 <= sext_ln32_8_fu_962_p1;
                gmem_addr_19_reg_1346 <= sext_ln32_9_fu_987_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                gmem_addr_19_read_reg_1493 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                gmem_addr_1_read_reg_1164 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_1_reg_1105 <= sext_ln27_1_fu_500_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                gmem_addr_2_read_reg_1169 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                gmem_addr_2_reg_1111 <= sext_ln27_2_fu_525_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                gmem_addr_3_reg_1117 <= sext_ln27_3_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                gmem_addr_4_reg_1123 <= sext_ln27_4_fu_575_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                gmem_addr_5_reg_1129 <= sext_ln27_5_fu_600_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                gmem_addr_6_reg_1135 <= sext_ln27_6_fu_625_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                gmem_addr_7_reg_1141 <= sext_ln27_7_fu_650_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                gmem_addr_8_reg_1152 <= sext_ln27_8_fu_675_p1;
                gmem_addr_9_reg_1158 <= sext_ln27_9_fu_700_p1;
                gmem_addr_read_reg_1147 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then
                reg_455 <= grp_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then
                reg_459 <= grp_fu_418_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state23, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state18, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_block_state26_io, ap_block_state28_io, ap_block_state27_io, ap_block_state29_io, ap_block_state20_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if ((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if ((not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if ((not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if ((not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if ((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln27_1_fu_510_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_8));
    add_ln27_2_fu_535_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_C));
    add_ln27_3_fu_560_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_10));
    add_ln27_4_fu_585_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_14));
    add_ln27_5_fu_610_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_18));
    add_ln27_6_fu_635_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_1C));
    add_ln27_7_fu_660_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_20));
    add_ln27_8_fu_685_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_24));
    add_ln27_fu_484_p2 <= std_logic_vector(unsigned(x) + unsigned(ap_const_lv64_4));
    add_ln32_1_fu_757_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_8));
    add_ln32_2_fu_782_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_C));
    add_ln32_3_fu_807_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_10));
    add_ln32_4_fu_832_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_14));
    add_ln32_5_fu_861_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_18));
    add_ln32_6_fu_890_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_1C));
    add_ln32_7_fu_947_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_20));
    add_ln32_8_fu_972_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_24));
    add_ln32_fu_731_p2 <= std_logic_vector(unsigned(y) + unsigned(ap_const_lv64_4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state20_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY)
    begin
                ap_block_state20_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state26_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_WREADY)
    begin
                ap_block_state26_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state27_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_WREADY)
    begin
                ap_block_state27_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state28_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_WREADY)
    begin
                ap_block_state28_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state29_io_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_WREADY)
    begin
                ap_block_state29_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_AWREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem_BVALID, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln47_1_fu_1034_p1 <= reg_459;
    bitcast_ln47_2_fu_1043_p1 <= reg_455;
    bitcast_ln47_3_fu_1052_p1 <= reg_459;
    bitcast_ln47_4_fu_1057_p1 <= reg_455;
    bitcast_ln47_5_fu_1062_p1 <= reg_459;
    bitcast_ln47_6_fu_1067_p1 <= reg_455;
    bitcast_ln47_7_fu_1072_p1 <= reg_459;
    bitcast_ln47_8_fu_1077_p1 <= reg_455;
    bitcast_ln47_9_fu_1082_p1 <= reg_459;
    bitcast_ln47_fu_1025_p1 <= reg_455;
    buf_1_fu_886_p1 <= gmem_addr_1_read_reg_1164;
    buf_2_fu_915_p1 <= gmem_addr_2_read_reg_1169;
    buf_fu_857_p1 <= gmem_addr_read_reg_1147;

    gmem_blk_n_AR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state30, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_418_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state23, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state25, ap_block_state26_io, ap_block_state28_io, ap_block_state27_io, ap_block_state29_io, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_418_ce <= ap_const_logic_1;
        else 
            grp_fu_418_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_418_p0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state25, ybuf_fu_997_p1, ybuf_1_fu_1001_p1, ybuf_2_fu_1005_p1, ybuf_3_fu_1009_p1, ybuf_4_fu_1013_p1, ybuf_5_fu_1017_p1, ybuf_6_fu_1021_p1, ybuf_7_fu_1030_p1, ybuf_8_fu_1039_p1, ybuf_9_fu_1048_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_418_p0 <= ybuf_9_fu_1048_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_418_p0 <= ybuf_8_fu_1039_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_418_p0 <= ybuf_7_fu_1030_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_418_p0 <= ybuf_6_fu_1021_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_418_p0 <= ybuf_5_fu_1017_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_418_p0 <= ybuf_4_fu_1013_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_418_p0 <= ybuf_3_fu_1009_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_418_p0 <= ybuf_2_fu_1005_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_418_p0 <= ybuf_1_fu_1001_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_418_p0 <= ybuf_fu_997_p1;
        else 
            grp_fu_418_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_418_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state25, buf_10_reg_1358, buf_11_reg_1373, buf_12_reg_1388, buf_13_reg_1393, buf_14_reg_1398, buf_15_reg_1403, buf_16_reg_1408, buf_17_reg_1413, buf_18_reg_1418, buf_19_reg_1423)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_418_p1 <= buf_19_reg_1423;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_418_p1 <= buf_18_reg_1418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_418_p1 <= buf_17_reg_1413;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_418_p1 <= buf_16_reg_1408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_418_p1 <= buf_15_reg_1403;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_418_p1 <= buf_14_reg_1398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_418_p1 <= buf_13_reg_1393;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_418_p1 <= buf_12_reg_1388;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_418_p1 <= buf_11_reg_1373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_418_p1 <= buf_10_reg_1358;
        else 
            grp_fu_418_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_422_ce <= ap_const_logic_1;
        else 
            grp_fu_422_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_422_p0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, buf_fu_857_p1, buf_1_fu_886_p1, buf_2_fu_915_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_422_p0 <= buf_2_fu_915_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_422_p0 <= buf_1_fu_886_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_422_p0 <= buf_fu_857_p1;
        else 
            grp_fu_422_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_427_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_427_ce <= ap_const_logic_1;
        else 
            grp_fu_427_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_427_p0 <= gmem_addr_3_read_reg_1186;

    grp_fu_431_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_431_ce <= ap_const_logic_1;
        else 
            grp_fu_431_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_431_p0 <= gmem_addr_4_read_reg_1205;

    grp_fu_435_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_435_ce <= ap_const_logic_1;
        else 
            grp_fu_435_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_435_p0 <= gmem_addr_5_read_reg_1217;

    grp_fu_439_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_439_ce <= ap_const_logic_1;
        else 
            grp_fu_439_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_439_p0 <= gmem_addr_6_read_reg_1229;

    grp_fu_443_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_443_ce <= ap_const_logic_1;
        else 
            grp_fu_443_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_443_p0 <= gmem_addr_7_read_reg_1241;

    grp_fu_447_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_447_ce <= ap_const_logic_1;
        else 
            grp_fu_447_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_447_p0 <= gmem_addr_8_read_reg_1270;

    grp_fu_451_ce_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_451_ce <= ap_const_logic_1;
        else 
            grp_fu_451_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_451_p0 <= gmem_addr_9_read_reg_1287;

    m_axi_gmem_ARADDR_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state18, gmem_addr_1_reg_1105, gmem_addr_2_reg_1111, gmem_addr_3_reg_1117, gmem_addr_4_reg_1123, gmem_addr_5_reg_1129, gmem_addr_6_reg_1135, gmem_addr_7_reg_1141, gmem_addr_8_reg_1152, gmem_addr_9_reg_1158, gmem_addr_11_reg_1198, gmem_addr_12_reg_1210, gmem_addr_13_reg_1222, gmem_addr_14_reg_1234, gmem_addr_15_reg_1246, gmem_addr_16_reg_1275, gmem_addr_17_reg_1292, gmem_addr_18_reg_1339, gmem_addr_19_reg_1346, ap_block_state20_io, sext_ln27_fu_473_p1, sext_ln32_fu_720_p1)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            m_axi_gmem_ARADDR <= gmem_addr_19_reg_1346;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            m_axi_gmem_ARADDR <= gmem_addr_18_reg_1339;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            m_axi_gmem_ARADDR <= gmem_addr_17_reg_1292;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            m_axi_gmem_ARADDR <= gmem_addr_16_reg_1275;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            m_axi_gmem_ARADDR <= gmem_addr_15_reg_1246;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            m_axi_gmem_ARADDR <= gmem_addr_14_reg_1234;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            m_axi_gmem_ARADDR <= gmem_addr_13_reg_1222;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            m_axi_gmem_ARADDR <= gmem_addr_12_reg_1210;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem_ARADDR <= gmem_addr_11_reg_1198;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_gmem_ARADDR <= sext_ln32_fu_720_p1;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem_ARADDR <= gmem_addr_9_reg_1158;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem_ARADDR <= gmem_addr_8_reg_1152;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem_ARADDR <= gmem_addr_7_reg_1141;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_gmem_ARADDR <= gmem_addr_6_reg_1135;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem_ARADDR <= gmem_addr_5_reg_1129;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem_ARADDR <= gmem_addr_4_reg_1123;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem_ARADDR <= gmem_addr_3_reg_1117;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_ARADDR <= gmem_addr_2_reg_1111;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_ARADDR <= gmem_addr_1_reg_1105;
        elsif ((not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem_ARADDR <= sext_ln27_fu_473_p1;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state18, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_AWADDR_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_RVALID, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_block_state26_io, ap_block_state28_io, ap_block_state27_io, ap_block_state29_io, gmem_addr_10_reg_1191, gmem_addr_11_reg_1198, gmem_addr_12_reg_1210, gmem_addr_13_reg_1222, gmem_addr_14_reg_1234, gmem_addr_15_reg_1246, gmem_addr_16_reg_1275, gmem_addr_17_reg_1292, gmem_addr_18_reg_1339, gmem_addr_19_reg_1346, ap_block_state20_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            m_axi_gmem_AWADDR <= gmem_addr_19_reg_1346;
        elsif ((not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            m_axi_gmem_AWADDR <= gmem_addr_18_reg_1339;
        elsif ((not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            m_axi_gmem_AWADDR <= gmem_addr_17_reg_1292;
        elsif ((not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            m_axi_gmem_AWADDR <= gmem_addr_16_reg_1275;
        elsif ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            m_axi_gmem_AWADDR <= gmem_addr_15_reg_1246;
        elsif ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            m_axi_gmem_AWADDR <= gmem_addr_14_reg_1234;
        elsif ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            m_axi_gmem_AWADDR <= gmem_addr_13_reg_1222;
        elsif ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            m_axi_gmem_AWADDR <= gmem_addr_12_reg_1210;
        elsif ((not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            m_axi_gmem_AWADDR <= gmem_addr_11_reg_1198;
        elsif ((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            m_axi_gmem_AWADDR <= gmem_addr_10_reg_1191;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_RVALID, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state29, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_block_state26_io, ap_block_state28_io, ap_block_state27_io, ap_block_state29_io, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_WREADY, m_axi_gmem_BVALID, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (m_axi_gmem_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (m_axi_gmem_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state38) and (m_axi_gmem_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state37) and (m_axi_gmem_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (m_axi_gmem_BVALID = ap_const_logic_1)))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_ARREADY, m_axi_gmem_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state22, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_block_state26_io, ap_block_state28_io, ap_block_state27_io, ap_block_state20_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state20_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((m_axi_gmem_ARREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state24)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state23)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((m_axi_gmem_AWREADY = ap_const_logic_0) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_WDATA_assign_proc : process(m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state30, ap_CS_fsm_state35, bitcast_ln47_fu_1025_p1, bitcast_ln47_1_fu_1034_p1, bitcast_ln47_2_fu_1043_p1, bitcast_ln47_3_fu_1052_p1, bitcast_ln47_4_fu_1057_p1, bitcast_ln47_5_fu_1062_p1, bitcast_ln47_6_fu_1067_p1, bitcast_ln47_7_fu_1072_p1, bitcast_ln47_8_fu_1077_p1, bitcast_ln47_9_fu_1082_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_9_fu_1082_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_8_fu_1077_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_7_fu_1072_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_6_fu_1067_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_5_fu_1062_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            m_axi_gmem_WDATA <= bitcast_ln47_4_fu_1057_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            m_axi_gmem_WDATA <= bitcast_ln47_3_fu_1052_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (m_axi_gmem_RVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_2_fu_1043_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (m_axi_gmem_RVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_1_fu_1034_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_gmem_RVALID = ap_const_logic_1))) then 
            m_axi_gmem_WDATA <= bitcast_ln47_fu_1025_p1;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_block_state26_io, ap_block_state28_io, ap_block_state27_io, ap_block_state29_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state29_io) and (ap_const_logic_1 = ap_CS_fsm_state29)) or (not(((ap_const_boolean_1 = ap_block_state27_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state32)) or (not(((m_axi_gmem_WREADY = ap_const_logic_0) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not(((ap_const_boolean_1 = ap_block_state28_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28)) or (not(((ap_const_boolean_1 = ap_block_state26_io) or (m_axi_gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln27_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_1_fu_490_p4),64));

        sext_ln27_2_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_2_fu_515_p4),64));

        sext_ln27_3_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_3_fu_540_p4),64));

        sext_ln27_4_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_4_fu_565_p4),64));

        sext_ln27_5_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_5_fu_590_p4),64));

        sext_ln27_6_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_6_fu_615_p4),64));

        sext_ln27_7_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_7_fu_640_p4),64));

        sext_ln27_8_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_8_fu_665_p4),64));

        sext_ln27_9_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_9_fu_690_p4),64));

        sext_ln27_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_463_p4),64));

        sext_ln32_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_1_fu_737_p4),64));

        sext_ln32_2_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_2_fu_762_p4),64));

        sext_ln32_3_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_3_fu_787_p4),64));

        sext_ln32_4_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_4_fu_812_p4),64));

        sext_ln32_5_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_5_fu_837_p4),64));

        sext_ln32_6_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_6_fu_866_p4),64));

        sext_ln32_7_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_7_fu_895_p4),64));

        sext_ln32_8_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_8_fu_952_p4),64));

        sext_ln32_9_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_9_fu_977_p4),64));

        sext_ln32_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_710_p4),64));

    trunc_ln1_fu_710_p4 <= y(63 downto 2);
    trunc_ln27_1_fu_490_p4 <= add_ln27_fu_484_p2(63 downto 2);
    trunc_ln27_2_fu_515_p4 <= add_ln27_1_fu_510_p2(63 downto 2);
    trunc_ln27_3_fu_540_p4 <= add_ln27_2_fu_535_p2(63 downto 2);
    trunc_ln27_4_fu_565_p4 <= add_ln27_3_fu_560_p2(63 downto 2);
    trunc_ln27_5_fu_590_p4 <= add_ln27_4_fu_585_p2(63 downto 2);
    trunc_ln27_6_fu_615_p4 <= add_ln27_5_fu_610_p2(63 downto 2);
    trunc_ln27_7_fu_640_p4 <= add_ln27_6_fu_635_p2(63 downto 2);
    trunc_ln27_8_fu_665_p4 <= add_ln27_7_fu_660_p2(63 downto 2);
    trunc_ln27_9_fu_690_p4 <= add_ln27_8_fu_685_p2(63 downto 2);
    trunc_ln32_1_fu_737_p4 <= add_ln32_fu_731_p2(63 downto 2);
    trunc_ln32_2_fu_762_p4 <= add_ln32_1_fu_757_p2(63 downto 2);
    trunc_ln32_3_fu_787_p4 <= add_ln32_2_fu_782_p2(63 downto 2);
    trunc_ln32_4_fu_812_p4 <= add_ln32_3_fu_807_p2(63 downto 2);
    trunc_ln32_5_fu_837_p4 <= add_ln32_4_fu_832_p2(63 downto 2);
    trunc_ln32_6_fu_866_p4 <= add_ln32_5_fu_861_p2(63 downto 2);
    trunc_ln32_7_fu_895_p4 <= add_ln32_6_fu_890_p2(63 downto 2);
    trunc_ln32_8_fu_952_p4 <= add_ln32_7_fu_947_p2(63 downto 2);
    trunc_ln32_9_fu_977_p4 <= add_ln32_8_fu_972_p2(63 downto 2);
    trunc_ln_fu_463_p4 <= x(63 downto 2);
    ybuf_1_fu_1001_p1 <= gmem_addr_11_read_reg_1368;
    ybuf_2_fu_1005_p1 <= gmem_addr_12_read_reg_1383;
    ybuf_3_fu_1009_p1 <= gmem_addr_13_read_reg_1433;
    ybuf_4_fu_1013_p1 <= gmem_addr_14_read_reg_1443;
    ybuf_5_fu_1017_p1 <= gmem_addr_15_read_reg_1453;
    ybuf_6_fu_1021_p1 <= gmem_addr_16_read_reg_1463;
    ybuf_7_fu_1030_p1 <= gmem_addr_17_read_reg_1473;
    ybuf_8_fu_1039_p1 <= gmem_addr_18_read_reg_1483;
    ybuf_9_fu_1048_p1 <= gmem_addr_19_read_reg_1493;
    ybuf_fu_997_p1 <= gmem_addr_10_read_reg_1353;
end behav;
